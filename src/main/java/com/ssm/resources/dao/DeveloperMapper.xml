<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，这里指的是封装的DAO -->
<mapper namespace="com.dao.DeveloperDao">
<!--    </resultMap>-->
        <resultMap id="Developer" type="com.entity.Developer">
<!--主表 Developer 表-->
            <result column="devUsername" property="devUsername"/>
            <result column="devNickname" property="devNickname"/>
            <result column="devPassword" property="devPassword"/>
            <result column="devInfo" property="devInfo"/>
<!--从表 Developer 表映射到 AppList-->
            <collection property="AppList" ofType="com.entity.App">
                <result column="appName" property="appName"/>

    <!--从表 App 表映射到 AppVersion和AppBasic-->
                <collection property="AppVersion" ofType="com.entity.AppVersion">
                    <result column="name" property="name"/>
                    <result column="time" property="time"/>
                    <result column="VersionId" property="VersionId"/>
                    <result column="VersionInformation" property="VersionInformation"/>\
                    <!-- 而 orderDetail 这张表的 itemid 外键只对应 items 表中一条数据,所以此处用association-->

                </collection>
                <collection property="AppBasic" ofType="com.entity.AppBasic">
                    <result column="state" property="state"/>
                    <result column="name" property="name"/>
                    <result column="author" property="author"/>
                    <result column="url" property="url"/>\
                </collection>
            </collection>
    </resultMap>

    <!-- sql语句的实现 -->
    <!--对userInfo表格的操作-->
    <insert id="addDeveloper" parameterType="Developer">
    --  首先先插入Version信息
        insert into Developer(devUsername, devNickname, devPassword, devInfo)
        values(#{devUsername}, #{devNickname}, #{devPassword}, #{devInfo})
    </insert>
    <delete id="deleteDeveloper" parameterType="String">
        delete *from Developer where devUsername = #{devUsername}
    </delete>
    <update id="updateDeveloper" resultMap="Developer" parameterType="Developer">
        update Developer set devUsername=#{devUsername}, devNickname=#{devNickname}, devPassword=#{devPassword}, devInfo=#{devInfo} where devUsername=#{devUsername}
    </update>

    <select id="selectDeveloper" resultType="Developer" parameterType="String">
        select
        devUsername,devNickname,devPassword,devInfo
         from Developer where devUsername = #{devUsername}
   </select>


</mapper>